/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.WarehouseManagerRole;



import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.MasterOrderCatalog;
import Business.Enterprise.Order;
import Business.Enterprise.OrderItem;
import Business.Enterprise.Product;
import Business.Enterprise.SupplierEnterprise;
import Business.Enterprise.WarehouseEnterprise;
import Business.Network.Network;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Shubham
 */
public class BrowseProductJPanel extends javax.swing.JPanel {

    /**
     * Creates new form BrowseProductJPanel
     */
    private JPanel userProcessContainer;
    private MasterOrderCatalog moc;
    private UserAccount userAccount;
    private Boolean isCheckedOut = false;
    private Order order;
    private Product product;
    private EcoSystem system;
    private WarehouseEnterprise warehouseEnterprise;
    private SupplierEnterprise supplierEnterprise;
    private static int productId=1;
     
    public BrowseProductJPanel(JPanel userProcessContainer, EcoSystem system,UserAccount userAccount,WarehouseEnterprise warehouseEnterprise) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.system=system;
        this.userAccount=userAccount;
        this.warehouseEnterprise=warehouseEnterprise;
        moc=warehouseEnterprise.getMoc();
                 
        populateSupplierCombo();//to get the supplier name on combo box

        if (!isCheckedOut) {
              order = new Order();
        }
        

    }

    public void populateSupplierCombo() {
        
        cmbSuppplierCombo.removeAllItems();
        for(Network network: system.getNetworkList()){
            for (Enterprise e : network.getEnterpriseDirectory().getEnterpriseList()){
                if(e.getEnterpriseType().getValue().equalsIgnoreCase("Supplier")){
                    supplierEnterprise = (SupplierEnterprise)e;
                    String status=supplierEnterprise.getEnrolementStatus();
                    if(status.equalsIgnoreCase("Approved")){
                            cmbSuppplierCombo.addItem(e);
                    }
                }
            }
        }
      populateProductTable();  
    }    
           
    
    
     private void populateProductTable() {
        supplierEnterprise = (SupplierEnterprise) cmbSuppplierCombo.getSelectedItem();
        if (supplierEnterprise != null) {
            DefaultTableModel dtm = (DefaultTableModel) productJTable.getModel();
            dtm.setRowCount(0);

            for (Product product : supplierEnterprise.getProductCatalog().getProductCatalog()) {
                Object row[] = new Object[3];
                row[0] = product;
                row[1] = product.getPrice();
                row[2] = product.getAvalaibility();
                dtm.addRow(row);
            }

        }
    }

    private void populateProductTable(Product product) {

        DefaultTableModel dtm = (DefaultTableModel) productJTable.getModel();
        dtm.setRowCount(0);

        Object row[] = new Object[3];
        row[0] = product;
        row[1] = product.getPrice();
        row[2] = product.getAvalaibility();
        dtm.addRow(row);

    }

    private void populateOrderItemTable(Order order) {
        DefaultTableModel dtm = (DefaultTableModel) orderItemJTable.getModel();
        dtm.setRowCount(0);
        for (OrderItem oi : order.getOrder()) {
            Object row[] = new Object[4];
            row[0] = oi;
            row[1] = oi.getQuantity();
            Product product = oi.getProduct();
            row[2] = product.getPrice();
            row[3] = product.getPrice() * oi.getQuantity();
            dtm.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cmbSuppplierCombo = new javax.swing.JComboBox();
        txtProductName = new javax.swing.JTextField();
        btnBrowse = new javax.swing.JButton();
        lblProductName = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        productJTable = new javax.swing.JTable();
        btnAddToCart = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        orderItemJTable = new javax.swing.JTable();
        spnQuantitySpinner = new javax.swing.JSpinner();
        btnCheckOut = new javax.swing.JButton();
        txtModifyQuantity = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btnModifyQuantity = new javax.swing.JButton();
        backjButton2 = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        cmbSuppplierCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbSuppplierCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSuppplierComboActionPerformed(evt);
            }
        });

        btnBrowse.setText("Browse");
        btnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseActionPerformed(evt);
            }
        });

        lblProductName.setText("Enter Product Name");

        productJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Name", "Price", "Availability"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(productJTable);
        if (productJTable.getColumnModel().getColumnCount() > 0) {
            productJTable.getColumnModel().getColumn(0).setResizable(false);
            productJTable.getColumnModel().getColumn(1).setResizable(false);
            productJTable.getColumnModel().getColumn(2).setResizable(false);
        }

        btnAddToCart.setText("Add to Cart");
        btnAddToCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddToCartActionPerformed(evt);
            }
        });

        orderItemJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Product", "Quantity", "Unit Price", "Total Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(orderItemJTable);
        if (orderItemJTable.getColumnModel().getColumnCount() > 0) {
            orderItemJTable.getColumnModel().getColumn(0).setResizable(false);
            orderItemJTable.getColumnModel().getColumn(1).setResizable(false);
            orderItemJTable.getColumnModel().getColumn(2).setResizable(false);
            orderItemJTable.getColumnModel().getColumn(3).setResizable(false);
        }

        btnCheckOut.setText("Check Out");
        btnCheckOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckOutActionPerformed(evt);
            }
        });

        jLabel1.setText("Modify Quantity");

        btnModifyQuantity.setText("Modify Quanity");
        btnModifyQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModifyQuantityActionPerformed(evt);
            }
        });

        backjButton2.setText("<<BACK");
        backjButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backjButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(spnQuantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAddToCart))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(38, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane1)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(cmbSuppplierCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(159, 159, 159)
                                    .addComponent(lblProductName)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(txtProductName, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(btnBrowse)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(91, 91, 91)
                                .addComponent(txtModifyQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(68, 68, 68)
                                .addComponent(btnModifyQuantity))
                            .addComponent(backjButton2)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnCheckOut, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(cmbSuppplierCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblProductName)
                            .addComponent(txtProductName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnBrowse))))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spnQuantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddToCart))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtModifyQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnModifyQuantity))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                .addComponent(btnCheckOut, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addComponent(backjButton2)
                .addContainerGap(41, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backjButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backjButton2ActionPerformed
        // TODO add your handling code here:
        for(OrderItem oi:order.getOrder()){
            oi.getProduct().setAvalaibility(oi.getQuantity()+oi.getProduct().getAvalaibility());
        }
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
       
        
        
    }//GEN-LAST:event_backjButton2ActionPerformed

    private void btnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseActionPerformed
        // TODO add your handling code here:
        try{
        String prodName = txtProductName.getText();
        supplierEnterprise =(SupplierEnterprise)cmbSuppplierCombo.getSelectedItem();
    
            for (Product product : supplierEnterprise.getProductCatalog().getProductCatalog()) {
                if (prodName.equalsIgnoreCase(product.getProdName())) {
                    populateProductTable(product);//overloading
                }

            }
        
        }
        catch (NumberFormatException E)
{JOptionPane.showMessageDialog(null,"Please Enter A Valid Input");}
    }//GEN-LAST:event_btnBrowseActionPerformed

    private void cmbSuppplierComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSuppplierComboActionPerformed
        // TODO add your handling code here:
        populateProductTable();
    }//GEN-LAST:event_cmbSuppplierComboActionPerformed

    private void btnAddToCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddToCartActionPerformed
        // TODO add your handling code here:
        
        int selectedRow = productJTable.getSelectedRow();
        
         product = (Product) productJTable.getValueAt(selectedRow, 0);
        if (selectedRow < 0) {
              JOptionPane.showMessageDialog(null, "Select the order Item");
            return;
           
        }
        
       
        int quantity = (Integer) spnQuantitySpinner.getValue();
        if (quantity <= 0 ) {
             JOptionPane.showMessageDialog(null, "Enter a valid quantity");
            return;
           
        }
        
        if ( quantity > product.getAvalaibility()){
              JOptionPane.showMessageDialog(null, "Quantity exceeds availability");
            return;
            
        }

         boolean isIncluded = false;
        for (OrderItem oi : order.getOrder()) {
            if (oi.getProduct().getProdName().equals(product.getProdName())) {
                int newQuantity = (Integer) spnQuantitySpinner.getValue();
                
                if (newQuantity > product.getAvalaibility()) {
                     System.out.println("Exceeds Availability");
                     return;
                }
                oi.setQuantity(newQuantity );
                isIncluded = true;
                int oldAvailability =oi.getProduct().getAvalaibility();
                int newAvailability = oldAvailability - newQuantity ;
               oi.getProduct().setAvalaibility(newAvailability);
                
            }
        }
        if (!isIncluded) {
           int newQuantity = (Integer) spnQuantitySpinner.getValue();

            OrderItem orderItem = order.addOrderItem();
            orderItem.setProduct(product);
            orderItem.setQuantity(quantity);
            int oldAvailability =orderItem.getProduct().getAvalaibility();
                int newAvailability = oldAvailability - newQuantity ;
               orderItem.getProduct().setAvalaibility(newAvailability);
            
           
        }

        populateOrderItemTable(order);
        populateProductTable();
        
       

    }//GEN-LAST:event_btnAddToCartActionPerformed

    private void btnModifyQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModifyQuantityActionPerformed
        // TODO add your handling code here:
        
        int row = orderItemJTable.getSelectedRow();
        if (row<0) {
            JOptionPane.showMessageDialog(null, "Select the order Item");
            return;
        }

        
        OrderItem selectedOrderItem = (OrderItem) orderItemJTable.getValueAt(row, 0);
        int oldQuantity = selectedOrderItem.getQuantity();

        
        int newQuantity = Integer.parseInt(txtModifyQuantity.getText());
        
        int diffQuantity=0;
        if(oldQuantity>newQuantity) {
            diffQuantity = oldQuantity - newQuantity;
            int avail = selectedOrderItem.getProduct().getAvalaibility();
            avail = avail + diffQuantity;
            selectedOrderItem.getProduct().setAvalaibility(avail);
            selectedOrderItem.setQuantity(newQuantity);
        }
        if(oldQuantity<newQuantity){
        
        diffQuantity= newQuantity - oldQuantity;
        int avail = selectedOrderItem.getProduct().getAvalaibility();
        avail = avail - diffQuantity;
        selectedOrderItem.getProduct().setAvalaibility(avail);
        selectedOrderItem.setQuantity(newQuantity);
        }
        
        populateProductTable();
        populateOrderItemTable(order);
        
 
    }//GEN-LAST:event_btnModifyQuantityActionPerformed

    private void btnCheckOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckOutActionPerformed
        // TODO add your handling code here:
       // order.setWarehouseManagerid(userAccount.getEmployee().getId());
        supplierEnterprise=(SupplierEnterprise)cmbSuppplierCombo.getSelectedItem();
        supplierEnterprise.setOrder(order);
        //order.setShipmentStatus("Pending");
        supplierEnterprise.getMoc().addOrder(order); 
        
        warehouseEnterprise.setOrder(order);
        moc.addOrder(order);
        //isCheckedOut=true;
        
       for(OrderItem oi : order.getOrder()){
           int quantity=oi.getQuantity();
            for(int i=0;i<quantity;i++){
                product=new Product();
                product.setProdName(oi.getProduct().getProdName());
                product.setModelNumber(productId);
                product.setAvalaibility(1);
                product.setPrice(oi.getProduct().getPrice());
                product.setLastMaintenance(oi.getProduct().getLastMaintenance());
                product.setLifeSpan(oi.getProduct().getLifeSpan());
                product.setManuFacturingDate(oi.getProduct().getManuFacturingDate());
                product.setManufacturer(oi.getProduct().getManufacturer());
                product.setNextMaintenance(oi.getProduct().getNextMaintenance());
                product.setPower(oi.getProduct().getPower());
                product.setStatus(oi.getProduct().getStatus());
                product.setTotalCost(oi.getProduct().getTotalCost());
                product.setWarrantyPeriod(oi.getProduct().getWarrantyPeriod());
                product.setWeight(oi.getProduct().getWeight());
                product.setLocation("WAREHOUSE");
                productId++;
                warehouseEnterprise.getProductCatalog().addProduct(product);
      
            }
            
       }
                
        
        JOptionPane.showMessageDialog(null,"Order Added" );
        isCheckedOut=true;
        order = new Order();
        populateOrderItemTable(order);
        txtProductName.setText("");
        
        
        
        
    }//GEN-LAST:event_btnCheckOutActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backjButton2;
    private javax.swing.JButton btnAddToCart;
    private javax.swing.JButton btnBrowse;
    private javax.swing.JButton btnCheckOut;
    private javax.swing.JButton btnModifyQuantity;
    private javax.swing.JComboBox cmbSuppplierCombo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblProductName;
    private javax.swing.JTable orderItemJTable;
    private javax.swing.JTable productJTable;
    private javax.swing.JSpinner spnQuantitySpinner;
    private javax.swing.JTextField txtModifyQuantity;
    private javax.swing.JTextField txtProductName;
    // End of variables declaration//GEN-END:variables

}
