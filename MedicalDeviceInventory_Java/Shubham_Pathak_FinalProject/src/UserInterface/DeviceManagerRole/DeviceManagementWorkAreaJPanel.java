/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.DeviceManagerRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.HospitalEnterprise;
import Business.Enterprise.WarehouseEnterprise;
import Business.Network.Network;
import Business.Organization.DeviceManagerOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.OperationRequestToDeviceManagerWorkRequest;
import Business.WorkQueue.RequestToWarehouseManager;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Shubham
 */
public class DeviceManagementWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form CareTeamWorkAreaJPanel
     */
    private JPanel userProcessContainer;
    private DeviceManagerOrganization organization;
    //private Enterprise enterprise;
    private UserAccount userAccount;
    private Date fromDate;
    private Date toDate;
    private HospitalEnterprise hospitalEnterprise;
    private EcoSystem system;
    private String hospitalName;
    private Date operationDate;
    private WarehouseEnterprise warehouseEnterprise;

    public DeviceManagementWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, DeviceManagerOrganization organization, HospitalEnterprise enterprise, EcoSystem system) {
        initComponents();

        this.userProcessContainer = userProcessContainer;
        this.organization = organization;
        this.hospitalEnterprise = enterprise;
        this.userAccount = account;
        this.system = system;

        populateTable();

    }

    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();

        model.setRowCount(0);
        for (WorkRequest request : organization.getWorkQueue().getWorkRequestList()) {
            if (request instanceof OperationRequestToDeviceManagerWorkRequest) {
                Object[] row = new Object[6];
                row[0] = request;
                row[1] = request.getSender().getEmployee().getName();
                row[2] = request.getReceiver() == null ? null : request.getReceiver().getEmployee().getName();
                row[3] = request.getStatus();
                operationDate = request.getOperationDate();
                row[4] = ((OperationRequestToDeviceManagerWorkRequest) request).getDevicetype();
                // row[5]=((RequestToWarehouseManager)request).getStatus();
                row[5] = operationDate;
            //row[6]=request.getDeviceName();

         //row[7]=toDate;
// row[6]=((((OperationRequestToDeviceManagerWorkRequest)request).getOperationDate()).add(-3));
                model.addRow(row);
            }

        }
//        for (Network network : system.getNetworkList()) {
//            for (Enterprise e : network.getEnterpriseDirectory().getEnterpriseList()) {
//                if (e instanceof WarehouseEnterprise) {
//                    warehouseEnterprise = (WarehouseEnterprise) e;
//                    for (WorkRequest request : organization.getWorkQueue().getWorkRequestList()) {
//                        if (request instanceof RequestToWarehouseManager) {
//
//                            Object[] row = new Object[6];
//                            row[0] = request;
//                            row[1] = request.getSender().getEmployee().getName();
//                            row[2] = request.getReceiver() == null ? null : request.getReceiver().getEmployee().getName();
//                            row[3] = request.getStatus();
//                            operationDate = request.getOperationDate();
//                            row[4] = ((RequestToWarehouseManager) request).getDeviceType();
//                            // row[5]=((RequestToWarehouseManager)request).getStatus();
//                            row[5] = operationDate;
//                            model.addRow(row);
//
//                        }
//                    }
//
//                }}}}
                /**
                 * This method is called from within the constructor to
                 * initialize the form. WARNING: Do NOT modify this code. The
                 * content of this method is always regenerated by the Form
                 * Editor.
                 */
    }        @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        refreshJButton = new javax.swing.JButton();
        processJButton = new javax.swing.JButton();
        assignJButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        cmbFromDate = new com.toedter.calendar.JDateChooser();
        cmbToDate = new com.toedter.calendar.JDateChooser();
        btnTimeFrame = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtDeviceRequired = new javax.swing.JTextField();

        setBackground(new java.awt.Color(255, 255, 255));

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Message", "Sender", "Receiver", "Status", "Device Type", "Operation Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);

        refreshJButton.setText("Refresh");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });

        processJButton.setText("Process");
        processJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processJButtonActionPerformed(evt);
            }
        });

        assignJButton.setText("Assign to me");
        assignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignJButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("From Date");

        jTextField1.setText("To Date");

        btnTimeFrame.setText("Send Request To Warehouse Manager");
        btnTimeFrame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTimeFrameActionPerformed(evt);
            }
        });

        jLabel2.setText("Device Required");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 609, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(240, 240, 240)
                                .addComponent(assignJButton)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(refreshJButton)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cmbToDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 65, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cmbFromDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtDeviceRequired))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnTimeFrame)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(processJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addComponent(refreshJButton)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(assignJButton)
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtDeviceRequired, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(cmbFromDate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbToDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnTimeFrame)
                    .addComponent(processJButton))
                .addContainerGap(31, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        populateTable();

    }//GEN-LAST:event_refreshJButtonActionPerformed

    private void processJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processJButtonActionPerformed

        int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow < 0) {
            return;
        }

        OperationRequestToDeviceManagerWorkRequest request = (OperationRequestToDeviceManagerWorkRequest) workRequestJTable.getValueAt(selectedRow, 0);

        request.setStatus("Device Scheduled");

        populateTable();


    }//GEN-LAST:event_processJButtonActionPerformed

    private void assignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignJButtonActionPerformed

        int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow < 0) {

            {
                JOptionPane.showMessageDialog(null, "Please Select A Row");
                return;
            }
        }

        WorkRequest request = (WorkRequest) workRequestJTable.getValueAt(selectedRow, 0);
        request.setReceiver(userAccount);
        request.setStatus("Pending");
        Calendar cal = Calendar.getInstance();
        cal.setTime(operationDate);
        cal.add(Calendar.DATE, -2);
        fromDate = cal.getTime();

        cal.setTime(operationDate);
        cal.add(Calendar.DATE, +2);
        toDate = cal.getTime();
        cmbFromDate.setSelectableDateRange(fromDate, operationDate);
        cmbToDate.setSelectableDateRange(operationDate, toDate);
        //  row[6]=fromDate;

        populateTable();
    }//GEN-LAST:event_assignJButtonActionPerformed

    private void btnTimeFrameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTimeFrameActionPerformed
        // TODO add your handling code here:
        int selectedRow = workRequestJTable.getSelectedRow();

            //Product product = (Product)tblProducta.getValueAt(selectedRow, 0);
         //MaintenanceWorkRequest request = new MaintenanceWorkRequest();
        if (selectedRow >= 0) {
            WorkRequest req = (WorkRequest) workRequestJTable.getValueAt(selectedRow, 0);
            RequestToWarehouseManager request = new RequestToWarehouseManager();

            //request.setSupplier((Supplier)userAccount.getEmployee());
            String message = "message";
            request.setMessage(message);
            request.setSender(userAccount);
            request.setStatus("Device needed");
            request.setDeviceManagerOrganization(organization);
            request.setFromDate(fromDate);
            request.setToDate(toDate);
            request.setDeviceName(txtDeviceRequired.getText());
            request.setOperationDate(request.getOperationDate());
            request.setHospitalName(hospitalName);

        //request.setOperationDate(cmbOperationDate.getDate());
            //request.setOperationType(String.valueOf(cmbOperation.getSelectedItem()));
        //request.getSupplier().setEnrolementStatus("Request Sent");
//        Organization org = null;
//        for (Organization o : hospitalEnterprise.getOrganizationDirectory().getOrganizationList()) {
//            if (o instanceof DeviceManagerOrganization) {
//               org = o;
//                break;
//            }
//        }
//        if (org != null) {
//            org.getWorkQueue().getWorkRequestList().add(request);
//            userAccount.getWorkQueue().getWorkRequestList().add(request);
//        }
//        if (message == null) {
//            JOptionPane.showMessageDialog(null, "Please Enter A Message");
//        }
            Enterprise ent = null;
            for (Network network : system.getNetworkList()) {
                for (Enterprise e : network.getEnterpriseDirectory().getEnterpriseList()) {
                    if (e instanceof WarehouseEnterprise) {
                        ent = e;
                        break;

                    }
                }
                if (ent != null) {
                    ent.getWorkQueue().getWorkRequestList().add(request);
                    userAccount.getWorkQueue().getWorkRequestList().add(request);

                }

                if (message == null) {
                    JOptionPane.showMessageDialog(null, "Please Enter A Message");
                }

            }
        }

    }//GEN-LAST:event_btnTimeFrameActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignJButton;
    private javax.swing.JButton btnTimeFrame;
    private javax.swing.ButtonGroup buttonGroup1;
    private com.toedter.calendar.JDateChooser cmbFromDate;
    private com.toedter.calendar.JDateChooser cmbToDate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JButton processJButton;
    private javax.swing.JButton refreshJButton;
    private javax.swing.JTextField txtDeviceRequired;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
